
# --------1-------- lesson

# 1) Поработайте с переменными, создайте несколько, выведите на экран,
# запросите у пользователя несколько чисел и строк и сохраните в переменные, выведите на экран.

# password = input('Введите пороль >>>>')
# original_password = 'corect'
# if original_password == password:
#     print('Верно')
# else:
#     print('Неверно')
# counter = 3
# while counter > 0:
#     print('Counter', counter)
# counter = counter - 1
# else:
#     print('Done')


# 2) Пользователь вводит время в секундах.
# Переведите время в часы, минуты и секунды и выведите в формате чч:мм:сс.
# Используйте форматирование строк.

# time = int(input("Укажите время в секундах "))
# hours = time // 3600
# minutes = (time - hours * 3600) // 60
# seconds = time - (hours * 3600 + minutes * 60)
# print(f"Время в формате чч:мм:сс {hours} : {minutes} : {seconds}")


# 3) Узнайте у пользователя число n.
# Найдите сумму чисел n + nn + nnn.
# Например, пользователь ввёл число 3. Считаем 3 + 33 + 333 = 369.

# n = int(input("Введите число >>>"))
# t = a + b + c
# a = n
# b = n + a
# c = b + n
# print(t)


# 4) Пользователь вводит целое положительное число.
# Найдите самую большую цифру в числе.
# Для решения используйте цикл while и арифметические операции.


# max_count = int(input("максимальное число >>>"))
# delimiter = int(input("число для деления >>>"))
# current_count = 0
# while True:
# if current_count == max_count:
#     break
# current_count += 1
# if current_count % delimiter == 0:
#     continue
#     print(current_count)


# 5) Спортсмен занимается ежедневными пробежками.
# В первый день его результат составил a километров.
# Каждый день спортсмен увеличивал результат на 10 % относительно предыдущего.
# Требуется определить номер дня, на который результат спортсмена составит не менее b километров.
# Программа должна принимать значения параметров a и b и выводить одно натуральное число — номер дня.
# Например: a = 2, b = 3.
# Результат:
# 1-й день: 2
# 2-й день: 2,2
# 3-й день: 2,42
# 4-й день: 2,66
# 5-й день: 2,93
# 6-й день: 3,22
# Ответ: на 6-й день спортсмен достиг результата — не менее 3 км.

# a = int(input("Введите результаты пробежки первого дня в км "))
# b = int(input("Введите окончательный результаты пробежки"))
# result_1days = a
# result_z: int = 1
# while result_1days < b:
#     a = a + 0.1 * a

# --------2-------- lesson

# 1)Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# my_list = [12, None, -77, 'True', True, 9.5]
# def my_type(el):
# for el in range(len(my_list)):
#     print(type(my_list[el]))
# return
# my_type(my_list)



# 2)Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().


# count = int(input("Введите количество элементов списка "))
# list = []
# i = 0
# el = 0
# while i < count:
# .append(input("Введите следующее значение списка "))
# i += 1
# for elem in range(int(len(list)/2)):
# list[el], list[el + 1] = list [el + 1], list[el]
# el += 2
# print(list)



# 3)Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.


# seasons_list = ['winter', 'spring', 'summer', 'autumn']
# seasons_dict = {1 : 'winter', 2 : 'spring', 3 : 'summer', 4 : 'autumn'}
# month = int(input("Введите месяц по номеру "))
# if month ==1 or month == 12 or month == 2:
#     print(seasons_dict.get(1))
#     print(seasons_list[0])
# elif month == 3 or month == 4 or month ==5:
#     print(seasons_dict.get(2))
#     print(seasons_list[1])
# elif month == 6 or month == 7 or month == 8:
#     print(seasons_dict.get(3))
#     print(seasons_list[2])
# elif month == 9 or month == 10 or month == 11:
#     print(seasons_dict.get(4))
#     print(seasons_list[3])
# else:
#     print("Такого месяца не существует")


# 4)Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.


# b_str = input("введите строку ")
# b_text = []
# num = 1
# for el in range(b_str.count(' ') + 1):
# my_word = b_str.split()
# if len(str(b_text)) <= 10:
#     print(f" {num} {b_text [el]}")
# num += 1
# else:
#     print(f" {num} {b_text [el] [0:10]}")
# num += 1


# --------3-------- lesson


# 1)Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.


# def div(*args):
# try:
# arg1 = int(input("Скажи делимое "))
# arg2 = int(input("Скажи делитель "))
# res = arg1 / arg2
# except ValueError:
#     return 'Value error'
# except ZeroDivisionError:
#     return "Неправильный делитель! Ты не можешь использовать 0 в делители!"
#     return res
# if arg2 != 0:
#     return arg1 / arg2
# else:
#     print("Неправильный номер! делитель не может быть нулевым")
#     print(f'result {div()}')


# 2)Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.


# name = input('Введи name')
# F = input("Введи фамилию")
# year = int(input('Введи год рождения '))
# city = input('Введи город')
# email = input('Введи почта')
# telephone = input('Введи телефон')
# a = ("name, surname, year, city, email, telephone")
# print(a)


# 3)Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.


# arg1 = input("веведите число")
# arg2 = input("веведите число")
# arg3 = input("веведите число")
# def my_func(arg1, arg2, arg3):
# if arg1 >= arg3 and arg2 >= arg3:
#     return arg1 + arg2
# elif arg1 > arg2 and arg1 < arg3:
#     return arg1 + arg3
# else:
# return arg2 + arg3
# print(my_func)



# 4)Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма чисел. П
# ользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
#Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.


# def t_sum():
# sum_res = 0
# ex = False
# while ex == False:
# number = input('Нажмите t для выхода(но если хотите посчитать пишите числа с пробелом)-').split()
# res = 0
# for el in range(len(number)):
# if number[el] == 't' or number[el] == 'T':
# ex = True
#     break
# else:
# res = res + int(number[el])
# sum_res = sum_res + res
# print(f'сумма котороя сейчас {sum_res}')
# print(f'твоя окончательная сумма {sum_res}')
# t_sum()

# --------4-------- lesson

# 1)Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.


# def sallary():
# try:
# time_money = float(input('Выработка в часах'))
# salary = int(input('Ставка в час'))
# premia_1 = int(input('Премия'))
# results = time_money * salary + premia_1
# print(f'заработная плата сотрудника {results}')
# except ValueError:
#     return print('No')
# sallary()


# 2)Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.


# list_1 = [1, 2, 3, 7, 5, 4, 9, 10, 44, 22 ]
# list_2 = [el for num, el in enumerate(list_1) if list_1[num - 1] < list_1[num]]
# print(f'Исходный список {list_1}')
# print(f'Новый список {list_2}')


# 3)Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.


# print(f'Числа от 20 до 2§40 кратные 20 или 21 - {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')


# 5)Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка


# from functools import reduce
# def fun_1(el_p, el):
#     return el_p * el
# print(f'Список четных значений {[el for el in range(99, 1001) if el % 2 == 0]}')
# print(f'Результат перемножения всех элементов списка {reduce(fun_1(), [el for el in range(99, 1001) if el % 2 == 0])}')


# 6)Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.


# a)
# from itertools import count
# for el in count(int(input('Введите стартовое число'))):
# print(el)
#
# b)
# from itertools import cycle
# list_1 = [True, 'abcdefg', 12345678910, None]
# for el in cycle(list_1):
# print(el)

# --------5-------- lesson

# 1)Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
# Об окончании ввода данных свидетельствует пустая строка.


# file_1 = open('test.txt', 'y')
# str_1= = input('Введите текст')
# while str_1:
#     file_1.writelines(str_1)
#     str_1 = input('Введите текст')
# if not str_1:
#      break
#  file_1.close()    file_1 = open('test.txt', 'd')
# content = file_1.readlines()
# print(content)
# file_1.close()

# 3)Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов (не менее 10 строк).
# Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников.
# Выполнить подсчет средней величины дохода сотрудников.


# with open('sal.txt', 'r') as file_1:
# sall = []
# r_1 = []
# list_1 = file_1.read().split('\n')
# for i in list_1:
#     i = i.split()
#  if int(i[1]) < 20000:
#     r_1.append(i[0])
#     sall.append(i[1])
# print(f'Оклад меньше 20.000 {r_1}, средний оклад {sum(map(int, sall)) / len(sall)}')

# 4)Создать (не программно) текстовый файл со следующим содержимым:
# One — 1
# Two — 2
# Three — 3
# Four — 4


# rus_1 = {'One' : 'Один', 'Two' : 'Два', 'Three' : 'Три', 'Four' : 'Четыре'}
# new_file = []
# with open('file_1.txt', 'r') as file_obj:
# for i in file_obj:
#     i = i.split(' ', 1)
#     new_file.append(rus_1[i[0]] + ' ' + i[1])
# print(new_file)
# 5
# def summa():
# try:
# with open('file_5.txt', 'O') as file_obj:
#     line = input('Напишите цифры через пробел ')
#     file_obj.writelines(line)
#     numb_1 = line.split()
#     print(sum(map(int, numb_1)))
# except IOError:
#     print('Ошибка!')
# except ValueError:
#     print('Неправильно набран номер. Почини что бы продолжить!')
# summa()

# 7)Создать вручную и заполнить несколькими строками текстовый файл, в котором каждая строка должна содержать данные о фирме: название, форма собственности, выручка, издержки.
# Пример строки файла: firm_1 ООО 10000 5000.
# Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль.
# Если фирма получила убытки, в расчет средней прибыли ее не включать.
# Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью.
# Если фирма получила убытки, также добавить ее в словарь (со значением убытков).
# Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
# Итоговый список сохранить в виде json-объекта в соответствующий файл.

# Пример json-объекта:
#
# [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]


# subjects = {}
# with open('file_6.txt', 'r') as init_f:
# for line in init_f:
#     subject, lecture, practice, lab = line.split()
#     subjects[subject] = int(lecture) + int(practice) + int(lab)
# print(f'Общее количество часов по предмету - {subjects}')


# --------7-------- lesson


# 1)Реализовать класс Matrix (матрица).
# Обеспечить перегрузку конструктора класса (метод init()), который должен принимать данные (список списков) для формирования матрицы.


# class Matrix:
# def init(self, list_1, list_2):
# self.list_1 = list_1
# self.list_2 = list_2
# def add(self):
# matrix_1 = [[0, 0, 0],
# [0, 0, 0],
# [0, 0, 0]]
# for i in range(len(self.list_1)):
# for j in range(len(self.list_2[i])):
# matrix_1[i][j] = self.list_1[i][j] + self.list_2[i][j]
# return str('\n'.join(['\t'.join([str(j) for j in i]) for i in matrix_1]))


# 2)Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3).
# Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.


# class Magz_1:
# def init(self, width, height):
# self.width = width
# self.height = height
# def get_square_c(self):
#     return self.width / 6.5 + 0.5
# def get_square_j(self):
# return self.height * 2 + 0.3
# @property
# def get_sq_full(self):
#     return str(f'Площадь ткани общ \n'
# f' {(self.width / 6.5 + 0.5) + (self.height * 2 + 0.3)}')
# class Coat(Magz_1):
# def init(self, width, height):
# super().init(width, height)
# self.square_c = round(self.width / 6.5 + 0.5)
# def str(self):
#     return f'Площадь пальто {self.square_c}'
# class Jackt(Magz_1):
# def init(self, width, height):
# super().init(width, height)
# self.square_j = round(self.height * 2 + 0.3)
# def str(self):
#     return f'Площадь костюм {self.square_j}'
# coat = Coat(2, 4)
# jacket = Jackt(1, 2)
# print(coat)
# print(jacket)
# print(coat.get_sq_full)
# print(jacket.get_sq_full)
# print(jacket.get_square_c())
# print(jacket.get_square_j())






































































